(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{17:function(e,t,n){var a,r;function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}
/**!
 * easy-pie-chart
 * Lightweight plugin to render simple, animated and retina optimized pie charts
 *
 * @license 
 * @author Robert Fleischmann <rendro87@gmail.com> (http://robert-fleischmann.de)
 * @version 2.1.7
 **/a=[n(1)],void 0===(r=function(e){return n=function(e,t){var n,a=document.createElement("canvas");e.appendChild(a),"object"===("undefined"==typeof G_vmlCanvasManager?"undefined":i(G_vmlCanvasManager))&&G_vmlCanvasManager.initElement(a);var r=a.getContext("2d");a.width=a.height=t.size;var o=1;window.devicePixelRatio>1&&(o=window.devicePixelRatio,a.style.width=a.style.height=[t.size,"px"].join(""),a.width=a.height=t.size*o,r.scale(o,o)),r.translate(t.size/2,t.size/2),r.rotate((t.rotate/180-.5)*Math.PI);var c=(t.size-t.lineWidth)/2;t.scaleColor&&t.scaleLength&&(c-=t.scaleLength+2),Date.now=Date.now||function(){return+new Date};var l=function(e,t,n){var a=(n=Math.min(Math.max(-1,n||0),1))<=0;r.beginPath(),r.arc(0,0,c,0,2*Math.PI*n,a),r.strokeStyle=e,r.lineWidth=t,r.stroke()},s=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e){window.setTimeout(e,1e3/60)},u=function(){t.scaleColor&&function(){var e,n;r.lineWidth=1,r.fillStyle=t.scaleColor,r.save();for(var a=24;a>0;--a)a%6==0?(n=t.scaleLength,e=0):(n=.6*t.scaleLength,e=t.scaleLength-n),r.fillRect(-t.size/2+e,0,n,1),r.rotate(Math.PI/12);r.restore()}(),t.trackColor&&l(t.trackColor,t.trackWidth||t.lineWidth,1)};this.getCanvas=function(){return a},this.getCtx=function(){return r},this.clear=function(){r.clearRect(t.size/-2,t.size/-2,t.size,t.size)},this.draw=function(e){var a;t.scaleColor||t.trackColor?r.getImageData&&r.putImageData?n?r.putImageData(n,0,0):(u(),n=r.getImageData(0,0,t.size*o,t.size*o)):(this.clear(),u()):this.clear(),r.lineCap=t.lineCap,a="function"==typeof t.barColor?t.barColor(e):t.barColor,l(a,t.lineWidth,e/100)}.bind(this),this.animate=function(e,n){var a=Date.now();t.onStart(e,n);var r=function(){var i=Math.min(Date.now()-a,t.animate.duration),o=t.easing(this,i,e,n-e,t.animate.duration);this.draw(o),t.onStep(e,n,o),i>=t.animate.duration?t.onStop(e,n):s(r)}.bind(this);s(r)}.bind(this)},a=function(e,t){var a={barColor:"#ef1e25",trackColor:"#f9f9f9",scaleColor:"#dfe0e0",scaleLength:5,lineCap:"round",lineWidth:3,trackWidth:void 0,size:110,rotate:0,animate:{duration:1e3,enabled:!0},easing:function(e,t,n,a,r){return(t/=r/2)<1?a/2*t*t+n:-a/2*(--t*(t-2)-1)+n},onStart:function(e,t){},onStep:function(e,t,n){},onStop:function(e,t){}};if(void 0!==n)a.renderer=n;else{if("undefined"==typeof SVGRenderer)throw new Error("Please load either the SVG- or the CanvasRenderer");a.renderer=SVGRenderer}var r={},i=0,o=function(){for(var n in this.el=e,this.options=r,a)a.hasOwnProperty(n)&&(r[n]=t&&void 0!==t[n]?t[n]:a[n],"function"==typeof r[n]&&(r[n]=r[n].bind(this)));"string"==typeof r.easing&&"undefined"!=typeof jQuery&&jQuery.isFunction(jQuery.easing[r.easing])?r.easing=jQuery.easing[r.easing]:r.easing=a.easing,"number"==typeof r.animate&&(r.animate={duration:r.animate,enabled:!0}),"boolean"!=typeof r.animate||r.animate||(r.animate={duration:1e3,enabled:r.animate}),this.renderer=new r.renderer(e,r),this.renderer.draw(i),e.dataset&&e.dataset.percent?this.update(parseFloat(e.dataset.percent)):e.getAttribute&&e.getAttribute("data-percent")&&this.update(parseFloat(e.getAttribute("data-percent")))}.bind(this);this.update=function(e){return e=parseFloat(e),r.animate.enabled?this.renderer.animate(i,e):this.renderer.draw(e),i=e,this}.bind(this),this.disableAnimation=function(){return r.animate.enabled=!1,this},this.enableAnimation=function(){return r.animate.enabled=!0,this},o()},void((t=e).fn.easyPieChart=function(e){return this.each((function(){var n;t.data(this,"easyPieChart")||(n=t.extend({},e,t(this).data()),t.data(this,"easyPieChart",new a(this,n)))}))});var t,n,a}.apply(t,a))||(e.exports=r)},19:function(e,t,n){},35:function(e,t,n){"use strict";n.r(t);n(13),n(14);var a=n(1),r=n.n(a),i=n(11),o=n.n(i),c=(n(17),n(18),n(19),n(12)),l=n.n(c),s=n(6),u=n.n(s),m=n(0),d=n.n(m);function p(e){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function g(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,a=b(e);if(t){var r=b(this).constructor;n=Reflect.construct(a,arguments,r)}else n=a.apply(this,arguments);return y(this,n)}}function y(e,t){return!t||"object"!==p(t)&&"function"!=typeof t?v(e):t}function v(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(i,e);var t,n,a,r=g(i);function i(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),(e=r.call(this)).state={value:""},e.handleChange=e.handleChange.bind(v(e)),e}return t=i,(n=[{key:"handleChange",value:function(e){var t=e.target.value;this.setState((function(){return{value:t}}))}},{key:"render",value:function(){var e=this.props.items.map((function(e){return d.a.createElement("div",{key:e.title,className:"grid-item col-sm-6 col-md-3 col-lg-3 "+e.category},d.a.createElement("div",{className:"portfolio-item"},d.a.createElement("div",{className:"hover-bg"},d.a.createElement("a",{href:e.link,target:"_blank",title:e.description},d.a.createElement("div",{className:"hover-text"},d.a.createElement("h4",null,e.title),d.a.createElement("small",null,e.description)),d.a.createElement("img",{src:e.imgSmall,className:"img-fluid",alt:e.title})))))}));return d.a.createElement("div",{className:"grid-items row"},e)}}])&&f(t.prototype,n),a&&f(t,a),i}(m.Component),S=n(3);function E(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],a=!0,r=!1,i=void 0;try{for(var o,c=e[Symbol.iterator]();!(a=(o=c.next()).done)&&(n.push(o.value),!t||n.length!==t);a=!0);}catch(e){r=!0,i=e}finally{try{a||null==c.return||c.return()}finally{if(r)throw i}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return C(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return C(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function j(){var e=Object(S.useCountUp)({end:30,duration:5,startOnMount:!1}),t=e.countUp,n=e.start,a=Object(S.useCountUp)({end:11680,duration:5,startOnMount:!1}),i=a.countUp,o=a.start,c=Object(S.useCountUp)({end:13,duration:5,startOnMount:!1}),l=c.countUp,s=c.start,u=Object(S.useCountUp)({end:60,duration:5,startOnMount:!1}),p=u.countUp,f=u.start,h=E(Object(m.useState)(0),2),g=h[0],y=h[1];return Object(m.useEffect)((function(){function e(e){r()(window).scrollTop()-r()("#achievements").offset().top+window.innerHeight>0&&0===g&&(n(),o(),s(),f(),y(1))}return window.addEventListener("scroll",e),function(){window.removeEventListener("scroll",e)}})),d.a.createElement("div",{className:"container"},d.a.createElement("div",{className:"section-title center"},d.a.createElement("h2",null,"Some Stats"),d.a.createElement("hr",null)),d.a.createElement("div",{className:"row"},d.a.createElement("div",{className:"col-md-3 col-sm-3 wow fadeInDown","data-wow-delay":"200ms"},d.a.createElement("div",{className:"achievement-box"},d.a.createElement("span",{className:"count"},t),d.a.createElement("h4",null,"Project Launched"))),d.a.createElement("div",{className:"col-md-3 col-sm-3 wow fadeInDown","data-wow-delay":"400ms"},d.a.createElement("div",{className:"achievement-box"},d.a.createElement("span",{className:"count"},i),d.a.createElement("h4",null,"Hours of Work"))),d.a.createElement("div",{className:"col-md-3 col-sm-3 wow fadeInDown","data-wow-delay":"800ms"},d.a.createElement("div",{className:"achievement-box"},d.a.createElement("span",{className:"count"},l),d.a.createElement("h4",null,"Years of Engineering Exp"))),d.a.createElement("div",{className:"col-md-3 col-sm-3 wow fadeInDown","data-wow-delay":"600ms"},d.a.createElement("div",{className:"achievement-box"},d.a.createElement("span",{className:"count"},p),d.a.createElement("h4",null,"Mountains Hiked")))))}var k=document.getElementById("portfolio-grid");k&&u.a.render(d.a.createElement(w,{items:[{title:"Staroyale.io",description:"the best web spaceship battle royale",category:"web game",imgSmall:"../img/projects/staroyale.png",link:"//staroyale.io"},{title:"Quill VR",description:"the VR animation painter (Owned by Facebook)",category:"app",imgSmall:"../img/projects/quill.png",link:"//quill.fb.com"},{title:"geom2.js",description:"A light weight js geometry and physics engine",category:"web game",imgSmall:"../img/projects/geom2.js.png",link:"//github.com/Alchemist0823/geom2.js"},{title:"threejs.quarks",description:"the most comprehensive ThreeJs Particle System",category:"web game",imgSmall:"../img/projects/three.quarks.png",link:"//github.com/Alchemist0823/three.quarks"},{title:"Astrocraft",description:"A mobile strategy game that allows users to design their own units",category:"app game",imgSmall:"../img/projects/astro-craft.png",link:"//astro-craft.com"},{title:"Goodi (archived)",description:"An academic Question Marketplace",category:"app",imgSmall:"../img/projects/goodiinc.png",link:"//www.facebook.com/goodiinc"},{title:"Zener 3D Engine",description:"A Data-Centered Entity System 3D Game engine written in Java. It is a free software released under GNU GPL v3.",category:"app",imgSmall:"../img/projects/zener.png",link:"//github.com/Alchemist0823/zener"},{title:"My Minecraft Shop (archived)",description:"An integrated Minecraft Server shopping and website system supporting Chinese Alipay payment method and real-time virtual good transaction.",category:"server",imgSmall:"../img/projects/mymcshop.png",link:"//mymcshop.com"},{title:"OIer C++ (archived)",description:"An C++ integrated development environment for preparing algorithm compition and education purpose.",category:"app",imgSmall:"../img/projects/oiercpp.png",link:"//www.n8lm.cn/product/?id=1"},{title:"Tribe Age (unfinished)",description:"A Turn-based Strategy Role-Playing Game powered by Zener 3D Engine in development",category:"game",imgSmall:"../img/projects/zener.png",link:"//github.com/Alchemist0823/tribeage"}]}),k);var O=document.getElementById("achievements");O&&u.a.render(d.a.createElement(j,null),O),r()((function(){o()("isotope",l.a,r.a),r()(".grid-items").isotope({itemSelector:".grid-item",percentPosition:!0,layoutMode:"fitRows",filter:"*",animationOptions:{duration:750,easing:"linear",queue:!1}}),r()(".cat a").click((function(){r()(".cat .active").removeClass("active"),r()(this).addClass("active");var e=r()(this).attr("data-filter");return r()(".grid-items").isotope({itemSelector:".grid-item",percentPosition:!0,layoutMode:"fitRows",filter:e,animationOptions:{duration:750,easing:"linear",queue:!1}}),!1}));var e=0;r()(document).scroll((function(){r()(window).scrollTop()-r()("#skills").offset().top+window.innerHeight>0&&(0===e&&r()(".chart").easyPieChart({size:152,lineWidth:8,barColor:"#121d1f",scaleColor:!1,easing:"easeOutBounce",onStep:function(e,t,n){r()(this.el).find(".percent").text(Math.round(n))}}),e++)}))}))}},[[35,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,